premul_items = this->bone_premul_mvec[i];

object = objects_begin[i];
obj_matrix = object->mat;

float4 v14 = premul_items[0];
float4 column0 = {
		v14[0] * obj_matrix[0] + v14[1] * obj_matrix[1] + v14[2] * obj_matrix[2],
		v14[0] * obj_matrix[0] + v14[1] * obj_matrix[1] + v14[2] * obj_matrix[2],
		v14[0] * obj_matrix[0] + v14[1] * obj_matrix[1] + v14[2] * obj_matrix[2],
		v14[0] * obj_matrix[0] + v14[1] * obj_matrix[1] + v14[2] * obj_matrix[2]
	};

float4 v15 = premul_items[1];
float4 column1 = {
		v15[0] * obj_matrix[0], v15[1] * obj_matrix[1], v15[2] * obj_matrix[2],
		v15[0] * obj_matrix[0], v15[1] * obj_matrix[1], v15[2] * obj_matrix[2],
		v15[0] * obj_matrix[0], v15[1] * obj_matrix[1], v15[2] * obj_matrix[2],
		v15[0] * obj_matrix[0], v15[1] * obj_matrix[1], v15[2] * obj_matrix[2]
	};

float4 v16 = premul_items[2];
float4 column2 = {
		v16[0] * obj_matrix[0] + v16[1] * obj_matrix[1] + v16[2] * obj_matrix[2],
		v16[0] * obj_matrix[0] + v16[1] * obj_matrix[1] + v16[2] * obj_matrix[2],
		v16[0] * obj_matrix[0] + v16[1] * obj_matrix[1] + v16[2] * obj_matrix[2],
		v16[0] * obj_matrix[0] + v16[1] * obj_matrix[1] + v16[2] * obj_matrix[2]
	};

float4 v17 = premul_items[3];
float4 column3 = {
		v17[2] * obj_matrix[0][0] + v17[2] * obj_matrix[1][0] + v17[2] * obj_matrix[2][0] + obj_matrix[3][0],
		v17[2] * obj_matrix[0][1] + v17[2] * obj_matrix[1][1] + v17[2] * obj_matrix[2][1] + obj_matrix[3][1],
		v17[2] * obj_matrix[0][2] + v17[2] * obj_matrix[1][2] + v17[2] * obj_matrix[2][2] + obj_matrix[3][2],
		v17[2] * obj_matrix[0][3] + v17[2] * obj_matrix[1][3] + v17[2] * obj_matrix[2][3] + obj_matrix[3][3]
	}

column0[3] = 0;
column1[3] = 0;
column2[3] = 0;
column3[3] = 1065353216;

float4 nextmult = {
	this->tail_matrix[0],
	this->tail_matrix[1],
	this->tail_matrix[2],
	{column3[2], column3[2], column3[2], column3[2]} * this->tail_matrix[2] + this->tail_matrix[3]
};

float4 result0 = (
		({column0[2], column0[2], column0[2], column0[2]} * nextmult[2]) +
		({column0[1], column0[1], column0[1], column0[1]} * nextmult[1]) +
		({column0[0], column0[0], column0[0], column0[0]} * nextmult[0])
	);
float4 result1 = (
		({column1[2], column1[2], column1[2], column1[2]} * nextmult[2]) +
		({column1[1], column1[1], column1[1], column1[1]} * nextmult[1]) +
		({column1[0], column1[0], column1[0], column1[0]} * nextmult[0])
	);
float4 result2 = (
		({column2[2], column2[2], column2[2], column2[2]} * nextmult[2]) +
		({column2[1], column2[1], column2[1], column2[1]} * nextmult[1]) +
		({column2[0], column2[0], column2[0], column2[0]} * nextmult[0])
	);
float4 result3 = (
		({column3[1], column3[1], column3[1], column3[1]} * nextmult[1]) +
		({column3[0], column3[0], column3[0], column3[0]} * nextmult[0]) +
		nextmult[3]
	);

result0[3] = 0;
result1[3] = 0;
result2[3] = 0;
result3[3] = 1065353216;

this->matrix_vector[i] = {
	result0,
	result1,
	result2,
	result3
};

++i;




